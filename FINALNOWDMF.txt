pragma solidity ^0.4.20;
import "./FundToken.sol";
import "./DostrixToken.sol";

contract FinalDMF{
    
    address owner;
    uint256 fundTKR = 0.001 ether;
    uint256 investTKR = 0.1 ether;
    address fundtokenAddress;
    uint256 initial_PM = 0;
    uint256 initial_IV = 0;
    
    
    function FinalDMF()
    {
        owner = msg.sender;
        fundtokenAddress=new FundToken();
    }
    
    mapping(address => uint256) public PortfolioManagerSTTOEH; //staked Total ether by the PortfolioManager
    mapping(address => uint256) public PortfolioManagerSTGVDMF; //staked ether on DMF giving certain restriction by portfoliomanager
    mapping(address => uint256) public PortfolioManagerOWNETH; //accesssable ether by the portfoliomanager 
    mapping(uint256 => address) public PortfolioManagerlist; //adding the more portfoliomanager to maintain as a list
    mapping(address => mapping(address => uint256)) public PurchaseTK; //Purchase token count by the portfoliomanager
    mapping(address => uint256) public ReturnPortMAddress; // returning the portfoliomanager address 
    
    
    //Mapping for tracking all the details about the investor
    
    struct InvestorDetails{
        uint256 inves_eth;
        uint256 total_TokGet;

    }
    
    mapping(address => mapping(address => InvestorDetails)) public invester;  //tracking the investor details 
    mapping(uint256 => address) public InvestorList; //adding the Investors into the mapping
    mapping(address => uint256) public ReturnINAddress; //returning the Investor address 
    mapping(address => mapping(address => address)) public InvestorPortadd; //returning the portfolio address for investment 
    
    //PortfolioManager Registration
    
    function PortfolioReg() public payable{
        
        uint256 minTK = (msg.value) / fundTKR;
        FundToken(fundtokenAddress).mintToken(msg.sender,minTK);
        PortfolioManagerSTTOEH[msg.sender] = (msg.value / 1 ether);
        uint256 split = (msg.value) / 1 ether;
        uint256 hunPer = split / 100;
        uint256 twenPer = hunPer * 20;
        uint256 eighPer = hunPer * 80;
        PortfolioManagerSTGVDMF[msg.sender] = twenPer;
        PortfolioManagerOWNETH[msg.sender] = eighPer;
        initial_PM = initial_PM + 1;
        PortfolioManagerlist[initial_PM] = msg.sender;
        ReturnPortMAddress[msg.sender] = initial_PM;
        }
        
        //Function For Getting the Contract Ether Balance 
        function GetBal()public view returns(uint256)
        {
            return address(this).balance;
        }
    
    //Investing the ether on portfoliomanager and get the fundtoken 
    
    function InvesterGetToken(address _add_) public payable {
        uint256 check = msg.value / 1 ether;
        if(check == PortfolioManagerOWNETH[_add_] || check < PortfolioManagerOWNETH[_add_])
        {
            initial_IV = initial_IV + 1;
            address(_add_).transfer(msg.value);
            uint256 amountTK = msg.value / investTKR;
            FundToken(fundtokenAddress).mintToken(_add_,amountTK);
            FundToken(fundtokenAddress).tokenDecrease(_add_,amountTK);
            invester[msg.sender][_add_].inves_eth = check;
            invester[msg.sender][_add_].total_TokGet = amountTK;
            InvestorPortadd[_add_][msg.sender] = _add_;
            InvestorList[initial_IV] = msg.sender;
            ReturnINAddress[msg.sender] = initial_IV;
            
        }
        }
        
    //Function for Purchasing the Markettoken
    
      function purchaseToken(address buyToken,uint256 amountoftoken) public{
            uint256 total = amountoftoken * 0.1 ether;
            MarketToken(buyToken).transfer(address(this),amountoftoken);
            buyToken.send(total);
            
        }
        
        
    //Function For Getting the Investor Balance of Tokens
        function getBalance(address a) public view returns(uint256)
        {
            return FundToken(fundtokenAddress).balanceOf(a);
        }
        
        //return the funtokens to portfoliomanager 
        function ReturnTokenToPortfolioManager(address _add_,uint256 _tok) public 
        {
            uint256 amount = _tok * 0.1 ether;
            uint256 reduce_eth = amount / 0.1 ether;
            FundToken(fundtokenAddress).tokenDecrease(msg.sender,_tok);
            FundToken(fundtokenAddress).mintToken(_add_,_tok);
            address(_add_).transfer(amount);
            invester[msg.sender][_add_].inves_eth =invester[msg.sender][_add_].inves_eth - reduce_eth;
            invester[msg.sender][_add_].total_TokGet =  invester[msg.sender][_add_].total_TokGet - _tok;
            }
    
    
}
